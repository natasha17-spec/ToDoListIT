{"version":3,"sources":["Icons/Preloader.svg","UI/TodoListTitle.tsx","UI/AddNewItemForm.tsx","UI/TodoListTask.tsx","UI/TodoListTasks.tsx","UI/TodoListFooter.tsx","DAL/api.ts","BLL/reducer.tsx","UI/TodoList.tsx","Common/Preloader.tsx","App.tsx","serviceWorker.tsx","BLL/store.tsx","index.tsx"],"names":["module","exports","TodoListTitle","state","editMode","title","props","onTitleChanged","e","setState","currentTarget","value","deactivateEditMode","updateTitle","activateEditMode","render","className","autoFocus","onBlur","onChange","onClick","React","Component","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","key","classNameForInput","type","placeholder","disabled","TodoListTask","task","onIsDoneChanged","status","checked","changeStatus","id","changeTitle","onDeleteTask","deleteTask","containerCssClass","priotityTitle","priority","TodoListTasks","tasksElements","tasks","map","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","instance","axios","create","baseURL","withCredentials","headers","api","get","post","todolistId","delete","put","newTaskTitle","taskId","ADD_TASK_SUCCESS","SET_TASKS_SUCCESS","DISABLED","initialState","todolists","isFetching","todolistReducer","action","tl","newTodolist","filter","t","newTask","obj","toogleIsFetching","TodoList","restoreState","getTasks","addTask","newFilterValue","changeTask","changedTask","find","deleteTodolist","deleteTodo","this","connect","todolist","todoId","dispatch","then","res","allTasks","data","items","item","addTaskSuccess","updateTaskSuccess","deleteTaskSuccess","updateTodolistTitleSuccess","Preloader","src","photo","App","getTodolists","addTodoList","addTodolist","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7e291de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Preloader.28ba06a8.svg\";","import React, {ChangeEvent} from 'react';\r\nimport '../App.css';\r\n\r\n\r\ntype StateType = {\r\n    editMode: boolean\r\n    title: string\r\n}\r\ntype OwnPropsType = {\r\n    title: string\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {}\r\ntype MapDispatchToPropsType = {\r\n    updateTitle: (title: string) => void\r\n}\r\ntype PropsType = OwnPropsType & MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass TodoListTitle extends React.Component<PropsType> {\r\n\r\n    state: StateType = {\r\n        editMode: false,\r\n        title: this.props.title\r\n    };\r\n\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value});\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({editMode: false});\r\n        this.props.updateTitle(this.state.title);\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true});\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.editMode\r\n                        ? <input className='todolist_title' value={this.state.title}\r\n                                 autoFocus={true}\r\n                                 onBlur={this.deactivateEditMode}\r\n                                 onChange={this.onTitleChanged}\r\n                        />\r\n                        : <span className=\"todoList-header__title\"\r\n                              onClick={this.activateEditMode}>{this.props.title}</span>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTitle;\r\n\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\ntype OwnPropsType= {\r\n    addItem:(newText)=>void\r\n    disabled: boolean\r\n}\r\n\r\ntype StateType = {\r\n    error: boolean,\r\n    title: string\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<OwnPropsType> {\r\n\r\n    state:StateType = {\r\n        error: false,\r\n        title: \"\"\r\n    };\r\n\r\n    onAddItemClick = () => {\r\n        let newText = this.state.title;\r\n        this.setState({title: \"\"});\r\n\r\n        if (newText === \"\") {\r\n            this.setState({error: true});\r\n        } else {\r\n            this.setState({error: false});\r\n            // передаём новый текст наружу\r\n            this.props.addItem(newText);\r\n        }\r\n    };\r\n\r\n    onTitleChanged = (e) => {\r\n        this.setState({\r\n            error: false,\r\n            title: e.currentTarget.value\r\n        });\r\n    };\r\n\r\n    onKeyPress = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            this.onAddItemClick();\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        let classNameForInput = this.state.error ? \"error\" : \"todolist_addNewTitle\";\r\n\r\n        return (\r\n            <div className=\"todoList-newTaskForm\">\r\n                <input className={classNameForInput}\r\n                       type=\"text\"\r\n                       placeholder=\"New item name\"\r\n                       onChange={this.onTitleChanged}\r\n                       onKeyPress={this.onKeyPress}\r\n                       value={this.state.title}\r\n                />\r\n                <button disabled={this.props.disabled} className='todolist_newItem_button' onClick={this.onAddItemClick}>Add</button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport '../App.css';\r\nimport {TaskType} from \"../Types/entities\";\r\n\r\n\r\n\r\ntype StateType = {\r\n    editMode: boolean\r\n    title:string\r\n\r\n}\r\ntype OwnPropsType = {\r\n    task: TaskType\r\n    disabled:boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    changeStatus:(id:string, status:number)=>void\r\n    changeTitle:(id:string, title:string)=>void\r\n    deleteTask:(id:string)=>void\r\n\r\n}\r\ntype PropsType = OwnPropsType & MapDispatchToPropsType\r\n\r\n\r\nclass TodoListTask extends React.Component<PropsType> {\r\n\r\n    state:StateType = {\r\n        editMode: false,\r\n        title: this.props.task.title\r\n    };\r\n\r\n    onIsDoneChanged = (e:ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        this.props.changeStatus(this.props.task.id, status);\r\n    };\r\n\r\n    onTitleChanged = (e:ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value});\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true});\r\n    };\r\n\r\n    deactivateEditMode= () => {\r\n        this.props.changeTitle(this.props.task.id, this.state.title);\r\n        this.setState({editMode: false});\r\n    };\r\n    onDeleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id);\r\n    };\r\n    render = () => {\r\n        let containerCssClass = this.props.task.status ? \"todoList-task done\" : \"todoList-task\";\r\n        let priotityTitle = \"\";\r\n        switch (this.props.task.priority) {\r\n            case 0: priotityTitle = \"Low\"; break;\r\n            case 1: priotityTitle = \"Middle\"; break;\r\n            case 2: priotityTitle = \"High\"; break;\r\n            case 3: priotityTitle = \"Urgently\"; break;\r\n            case 4: priotityTitle = \"Later\"; break;\r\n        }\r\n        return (\r\n                <div className={containerCssClass}>\r\n                    <input type=\"checkbox\" checked={this.props.task.status === 2}\r\n                           onChange={this.onIsDoneChanged}/>\r\n                    { this.state.editMode\r\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\r\n                                 value={this.state.title} />\r\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\r\n                    }, priority: {priotityTitle}\r\n                    <div>\r\n                        <button disabled={this.props.disabled} className='todolist_task_button' onClick={this.onDeleteTask}>Х</button>\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;\r\n\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport {TaskType} from \"../Types/entities\";\r\n\r\n\r\n\r\ntype OwnPropsType = {\r\n    changeStatus: (taskId: string, status: number) => void\r\n    changeTitle: (taskId: string, title: string) => void\r\n    deleteTask: (taskId: string) => void\r\n    tasks: TaskType[]\r\n    disabled: boolean\r\n\r\n}\r\n\r\nclass TodoListTasks extends React.Component <OwnPropsType> {\r\n    render = () => {\r\n        let tasksElements = this.props.tasks.map((task: TaskType) => {\r\n            return <TodoListTask\r\n                disabled={this.props.disabled}\r\n                task={task}\r\n                key={task.id}\r\n                changeStatus={this.props.changeStatus}\r\n                changeTitle={this.props.changeTitle}\r\n                deleteTask={this.props.deleteTask}\r\n            />\r\n        });\r\n\r\n        return (\r\n            <div className=\"todoList-tasks\">\r\n                {tasksElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;\r\n\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\n\r\ntype StateType = {\r\n    isHidden:boolean\r\n\r\n}\r\ntype OwnPropsType = {\r\n  changeFilter:(newFilterValue: string) => void\r\n    filterValue:string\r\n}\r\n\r\nclass TodoListFooter extends React.Component<OwnPropsType>{\r\n\r\n    state:StateType = {\r\n        isHidden: false\r\n    };\r\n\r\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); };\r\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); };\r\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\"); };\r\n    onShowFiltersClick = () => { this.setState({isHidden: true}) };\r\n    onHideFiltersClick = () => { this.setState({isHidden: false}) };\r\n\r\n    render = () => {\r\n\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"todoList-footer_button\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"todoList-footer_button\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"todoList-footer_button\";\r\n\r\n        return (\r\n            <div className=\"todoList-footer\">\r\n                { !this.state.isHidden && <div className='container_footer'>\r\n                     <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\r\n                     <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\r\n                     <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\r\n                  </div>\r\n                }\r\n                { !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>hide</span> }\r\n                { this.state.isHidden && <span onClick={ this.onHideFiltersClick }>show</span> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;\r\n\r\n","import axios from \"axios\";\r\nimport {TaskType, TodoType} from \"../Types/entities\";\r\n\r\n\r\ntype CommonResponseType<value> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: value\r\n}\r\ntype GetTasksResponseType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"aee8e0dc-0edb-41fe-ae30-2037f01a0933\"}\r\n});\r\n\r\nexport const api = {\r\n    getTodolists() {\r\n        return instance.get<TodoType[]>(\"\");\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoType }>>(\"\", {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType<{}>>(`/${todolistId}`)\r\n    },\r\n    updateTodolistTitle(title: string, todolistId: string) {\r\n        return instance.put(`/${todolistId}`, {title: title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`/${todolistId}/tasks`)\r\n    },\r\n    createTask(newTaskTitle: string, todolistId: string) {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`/${todolistId}/tasks`, {title: newTaskTitle});\r\n    },\r\n    updateTask(taskId: string, todolistId: string, task: TaskType) {\r\n        return instance.put<CommonResponseType<{}>>(`/${todolistId}/tasks/${taskId}`, task)\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return instance.delete<CommonResponseType<{}>>(`/${todolistId}/tasks/${taskId}`)\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n","import {api} from \"../DAL/api\";\r\nimport {TaskType, TodoType} from \"../Types/entities\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\n\r\nconst ADD_TODOLIST_SUCCESS = \"TodoList/Reducer/ADD_TODOLIST_SUCCESS\";\r\nconst DELETE_TODOLIST_SUCCESS = \"TodoList/Reducer/DELETE_TODOLIST_SUCCESS\";\r\nconst DELETE_TASK_SUCCESS = \"TodoList/Reducer/DELETE_TASK_SUCCESS\";\r\nconst UPDATE_TODOLIST_TITLE_SUCCESS = \"TodoList/Reducer/UPDATE_TODOLIST_TITLE_SUCCESS\";\r\nconst ADD_TASK_SUCCESS = \"TodoList/Reducer/ADD_TASK_SUCCESS\";\r\nconst SET_TASKS_SUCCESS = \"TodoList/Reducer/SET_TASKS_SUCCESS\";\r\nconst UPDATE_TASK_SUCCESS = \"TodoList/Reducer/UPDATE_TASK_SUCCESS\";\r\nconst SET_TODOLISTS_SUCCESS = \"TodoList/Reducer/SET_TODOLISTS_SUCCESS\";\r\nconst TOGGLE_IS_FETCHING = \"TodoList/Reducer/TOGGLE_IS_FETCHING\";\r\nconst DISABLED = \"TodoList/Reducer/DISABLED\";\r\n\r\ntype InitialStateType = {\r\n    todolists: TodoType[],\r\n    isFetching: boolean,\r\n    disabled: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    todolists: [],\r\n    isFetching: false,\r\n    disabled: false\r\n};\r\n\r\nconst todolistReducer = (state: InitialStateType = initialState, action: AppActionType) => {\r\n    switch (action.type) {\r\n        case SET_TASKS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, tasks: action.tasks}\r\n                    }\r\n                })\r\n            };\r\n        case SET_TODOLISTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            };\r\n        case ADD_TODOLIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: [action.newTodolist, ...state.todolists]\r\n            };\r\n        case DELETE_TODOLIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            };\r\n        case UPDATE_TODOLIST_TITLE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) return tl;\r\n                    else return {...tl, title: action.title}\r\n                })\r\n            };\r\n        case DELETE_TASK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TASK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [action.newTask, ...tl.tasks]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case UPDATE_TASK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id !== action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching};\r\n        case DISABLED:\r\n            return {\r\n                ...state, disabled: action.disabled\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default todolistReducer;\r\n\r\n// Action creators\r\nconst updateTaskSuccess = (taskId: string, obj: any, todolistId: string): UpdateTaskSuccessActionType => ({\r\n    type: UPDATE_TASK_SUCCESS,\r\n    taskId,\r\n    obj,\r\n    todolistId\r\n});\r\nconst deleteTodoSuccess = (todolistId: string): DeleteTodoSuccessActionType => ({\r\n    type: DELETE_TODOLIST_SUCCESS,\r\n    todolistId\r\n});\r\nconst deleteTaskSuccess = (todolistId: string, taskId: string): DeleteTaskSuccessActionType => ({\r\n    type: DELETE_TASK_SUCCESS,\r\n    todolistId,\r\n    taskId\r\n});\r\nconst updateTodolistTitleSuccess = (todolistId: string, title: string): UpdateTodolistTitleSuccessActionType => ({\r\n    type: UPDATE_TODOLIST_TITLE_SUCCESS,\r\n    todolistId,\r\n    title\r\n});\r\nconst addTaskSuccess = (newTask: TaskType, todolistId: string): AddTaskSuccessActionType => ({\r\n    type: ADD_TASK_SUCCESS,\r\n    newTask,\r\n    todolistId\r\n});\r\nconst setTasksSuccess = (tasks: TaskType[], todolistId: string): SetTasksSuccessActionType => ({\r\n    type: SET_TASKS_SUCCESS,\r\n    tasks,\r\n    todolistId\r\n});\r\nconst addTodolistSuccess = (newTodolist: TodoType): AddTodolistSuccessActionType => ({\r\n    type: ADD_TODOLIST_SUCCESS,\r\n    newTodolist: newTodolist\r\n});\r\nconst setTodolistsSuccess = (todolists: TodoType[]): SetTodolistsSuccess => ({\r\n    type: SET_TODOLISTS_SUCCESS,\r\n    todolists: todolists\r\n});\r\nconst toogleIsFetching = (isFetching: boolean): ToogleIsFetching => ({type: TOGGLE_IS_FETCHING, isFetching});\r\nconst disabled = (disabled: boolean): Disabled => ({type: DISABLED, disabled});\r\n\r\n// Action creators type\r\ntype UpdateTaskSuccessActionType = {\r\n    type: typeof UPDATE_TASK_SUCCESS\r\n    taskId: string\r\n    obj: any\r\n    todolistId: string\r\n}\r\ntype DeleteTodoSuccessActionType = {\r\n    type: typeof DELETE_TODOLIST_SUCCESS\r\n    todolistId: string\r\n}\r\ntype UpdateTodolistTitleSuccessActionType = {\r\n    type: typeof UPDATE_TODOLIST_TITLE_SUCCESS\r\n    todolistId: string\r\n    title: string\r\n}\r\ntype DeleteTaskSuccessActionType = {\r\n    type: typeof DELETE_TASK_SUCCESS\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype AddTaskSuccessActionType = {\r\n    type: typeof ADD_TASK_SUCCESS\r\n    newTask: TaskType\r\n    todolistId: string\r\n}\r\ntype SetTasksSuccessActionType = {\r\n    type: typeof SET_TASKS_SUCCESS\r\n    tasks: TaskType[]\r\n    todolistId: string\r\n}\r\ntype AddTodolistSuccessActionType = {\r\n    type: typeof ADD_TODOLIST_SUCCESS\r\n    newTodolist: TodoType\r\n}\r\ntype SetTodolistsSuccess = {\r\n    type: typeof SET_TODOLISTS_SUCCESS\r\n    todolists: TodoType[]\r\n}\r\ntype ToogleIsFetching = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\ntype Disabled = {\r\n    type: typeof DISABLED\r\n    disabled: boolean\r\n}\r\n\r\n//TodoActionType //one reducer\r\ntype TodoActionType =\r\n    UpdateTaskSuccessActionType\r\n    | DeleteTodoSuccessActionType\r\n    | UpdateTodolistTitleSuccessActionType\r\n    | DeleteTaskSuccessActionType\r\n    | AddTaskSuccessActionType\r\n    | SetTasksSuccessActionType\r\n    | AddTodolistSuccessActionType\r\n    | SetTodolistsSuccess\r\n    | ToogleIsFetching\r\n    | Disabled\r\n\r\n\r\n//Общий\r\n\r\ntype AppActionType = TodoActionType\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, TodoActionType>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, TodoActionType>\r\n\r\n\r\nexport const getTodolists = (): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    dispatch(toogleIsFetching(true));\r\n    {\r\n        api.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodolistsSuccess(res.data));\r\n                dispatch(toogleIsFetching(false));\r\n            })\r\n    }\r\n};\r\n\r\nexport const getTasks = (todoId: string): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.getTasks(todoId)\r\n        .then(res => {\r\n            let allTasks = res.data.items;\r\n            dispatch(setTasksSuccess(allTasks, todoId));\r\n        });\r\n};\r\n\r\nexport const addTodolist = (title: string): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    dispatch(disabled(true));\r\n    api.createTodolist(title)\r\n        .then(res => {\r\n            let todolist = res.data.data.item;\r\n            dispatch(addTodolistSuccess(todolist))\r\n            dispatch(disabled(false));\r\n        });\r\n};\r\n\r\nexport const addTask = (title: string, todoId: string): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    dispatch(disabled(true));\r\n    api.createTask(title, todoId)\r\n        .then(res => {\r\n            let newTask = res.data.data.item;\r\n            dispatch(addTaskSuccess(newTask, todoId))\r\n            dispatch(disabled(false));\r\n        });\r\n};\r\n\r\nexport const changeTask = (taskId: string, todoId: string, task: TaskType, obj: any): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.updateTask(taskId, todoId, task)\r\n        .then(res => {\r\n            dispatch(updateTaskSuccess(taskId, obj, todoId))\r\n        })\r\n};\r\n\r\nexport const deleteTodo = (todoId: string): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.deleteTodolist(todoId)\r\n        .then(res => {\r\n            dispatch(deleteTodoSuccess(todoId))\r\n        });\r\n};\r\n\r\nexport const deleteTask = (taskId: string, todoId: string): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.deleteTask(taskId, todoId)\r\n        .then(res => {\r\n            dispatch(deleteTaskSuccess(todoId, taskId))\r\n        });\r\n};\r\n\r\nexport const updateTitle = (title: string, todoId: string): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.updateTodolistTitle(title, todoId)\r\n        .then(res => {\r\n            dispatch(updateTodolistTitleSuccess(todoId, title))\r\n        });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport {connect} from \"react-redux\";\r\nimport TodoListTitle from \"./TodoListTitle\";\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport {addTask, changeTask, deleteTask, deleteTodo, getTasks, updateTitle} from \"../BLL/reducer\";\r\nimport {TaskType, TodoType} from \"../Types/entities\";\r\nimport {AppStateType} from \"../BLL/store\";\r\n\r\n\r\ntype StateType = {\r\n    filterValue: string\r\n}\r\ntype OwnPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TaskType[]\r\n\r\n}\r\ntype MapStateToPropsType = {\r\n    disabled: boolean,\r\n    todolists: TodoType[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getTasks: (id: string) => void\r\n    addTask: (newText: string, id: string) => void\r\n    changeTask: (taskId: string, id: string, task: TaskType, obj: any) => void\r\n    deleteTodo: (id: string) => void\r\n    deleteTask: (taskId: string, id: string) => void\r\n    updateTitle: (title: string, id: string) => void\r\n\r\n\r\n}\r\ntype PropsType = OwnPropsType & MapDispatchToPropsType & MapStateToPropsType\r\n\r\nclass TodoList extends React.Component<PropsType> {\r\n\r\n    state: StateType = {\r\n        filterValue: \"All\"\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n\r\n    restoreState = () => {\r\n        this.props.getTasks(this.props.id)\r\n    };\r\n\r\n    addTask = (newText: string) => {\r\n        this.props.addTask(newText, this.props.id)\r\n    };\r\n\r\n    changeFilter = (newFilterValue: string) => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        });\r\n    };\r\n\r\n    changeTask = (taskId: string, obj: any) => {\r\n        let changedTask = this.props.tasks.find((task: TaskType) => {\r\n            return task.id === taskId\r\n        });\r\n        let task = {...changedTask, ...obj};\r\n\r\n        this.props.changeTask(taskId, this.props.id, task, obj);\r\n    };\r\n\r\n    changeStatus = (taskId: string, status: number) => {\r\n        this.changeTask(taskId, {status});\r\n    };\r\n\r\n    changeTitle = (taskId: string, title: string) => {\r\n        this.changeTask(taskId, {title});\r\n    };\r\n\r\n    deleteTodolist = () => {\r\n        this.props.deleteTodo(this.props.id)\r\n    };\r\n\r\n    deleteTask = (taskId: string) => {\r\n        this.props.deleteTask(taskId, this.props.id);\r\n    };\r\n\r\n    updateTitle = (title: string) => {\r\n        this.props.updateTitle(title, this.props.id)\r\n    };\r\n\r\n    render = () => {\r\n        let {tasks = []} = this.props;\r\n        return (\r\n            <div className=\"todoList\">\r\n                <div className=\"todoList-header\">\r\n                    <div className=\"wrapper\">\r\n                        <TodoListTitle title={this.props.title} updateTitle={this.updateTitle}/>\r\n                        <button className='todolist_delete_button' onClick={this.deleteTodolist}>X</button>\r\n                    </div>\r\n                    <AddNewItemForm disabled={this.props.disabled} addItem={this.addTask}/>\r\n                </div>\r\n\r\n                <TodoListTasks\r\n                    disabled={this.props.disabled}\r\n                    changeStatus={this.changeStatus}\r\n                    changeTitle={this.changeTitle}\r\n                    deleteTask={this.deleteTask}\r\n                    tasks={tasks.filter((t: TaskType) => {\r\n                        if (this.state.filterValue === \"All\") {\r\n                            return true;\r\n                        }\r\n                        if (this.state.filterValue === \"Active\") {\r\n                            return t.status === 0;\r\n                        }\r\n                        if (this.state.filterValue === \"Completed\") {\r\n                            return t.status === 2;\r\n                        }\r\n                    })}/>\r\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        todolists: state.todolist.todolists,\r\n        disabled: state.todolist.disabled\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, {getTasks, addTask, changeTask, deleteTodo, deleteTask, updateTitle})(TodoList);\r\n\r\n","import photo from \"../Icons/Preloader.svg\";\r\nimport React from 'react';\r\nimport \"./Preloader.css\"\r\n\r\nlet Preloader = () =>{\r\n    return <div><img src={photo} className='preloader'/></div>\r\n};\r\nexport default Preloader","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./UI/TodoList\";\r\nimport AddNewItemForm from \"./UI/AddNewItemForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTodolist, getTodolists} from \"./BLL/reducer\";\r\nimport {TodoType} from \"./Types/entities\";\r\nimport {AppStateType} from \"./BLL/store\";\r\nimport Preloader from \"./Common/Preloader\";\r\n\r\ntype OwnPropsType = {\r\n    id: string\r\n    isFetching: boolean\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    todolists: TodoType[],\r\n    isFetching: boolean,\r\n    disabled: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getTodolists: () => void\r\n    addTodolist: (title: string) => void\r\n}\r\ntype PropsType = OwnPropsType & MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass App extends React.Component<PropsType> {\r\n\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n\r\n    restoreState = (): void => {\r\n        this.props.getTodolists()\r\n    };\r\n\r\n    addTodoList = (title: string): void => {\r\n        this.props.addTodolist(title)\r\n    };\r\n\r\n    render = () => {\r\n        const todolists = this.props.todolists.map((tl: TodoType) => {\r\n            return <TodoList key={tl.id}\r\n                             id={tl.id}\r\n                             title={tl.title}\r\n                             tasks={tl.tasks}/>\r\n        });\r\n\r\n        return (\r\n\r\n            <>\r\n                {\r\n                    this.props.isFetching ? <Preloader/> :\r\n                        <div>\r\n                            <div>\r\n                                <AddNewItemForm disabled={this.props.disabled} addItem={this.addTodoList}\r\n\r\n                                />\r\n                            </div>\r\n                            <div className=\"App\">\r\n                                {todolists}\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        todolists: state.todolist.todolists,\r\n        isFetching: state.todolist.isFetching,\r\n        disabled: state.todolist.disabled\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, {getTodolists, addTodolist})\r\n(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\n\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport todolistReducer from \"./reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolist: todolistReducer\r\n});\r\n\r\ntype RootReducerType= typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./BLL/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App id={this.props.id}/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}